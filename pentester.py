#!/usr/bin/python3
from bs4 import BeautifulSoup
from django.utils.encoding import smart_str
import requests
import os,readline,collections,sys
from prettytable import PrettyTable
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
#Global Variables
pentesterAcademyURL ='https://www.pentesteracademy.com'
pentestFolder = '/home/tipsytux/Warehouse/Downloads/Tutorials/PentesterAcademy1'
pentesterDatabasePath= '/home/tipsytux/courses.list'
R = "\033[0;31;40m" #RED
G = "\033[0;32;40m" # GREEN
Y = "\033[0;33;40m" # Yellow
B = "\033[0;34;40m" # Blue
P = "\033[0;35;40m" #Purple
N = "\033[0m" # Reset
courseList = {} #This will be used globally, and will only change on updateDatabase functionality
def setup(courseList):
    try:
        os.chdir(pentestFolder)
    except:
        os.mkdir(pentestFolder)
        os.chdir(pentestFolder)
    for course,values in courseList.items():
        if not os.path.exists(course):
            print ("Creating directory - {} ....".format(course.replace('/','-')))
            os.mkdir(course.replace('/','-'))
    print("by now we should have our test folders")
    return True
def updateDatabase():
    resp=requests.get(pentesterAcademyURL+'/topics')
    txt = resp.text
    soup = BeautifulSoup(txt,'lxml')
    topicsSoup=soup.find_all("h3",{"class":"media-heading"})
    topicList = []
    dataFile = open(pentesterDatabasePath,'w')
    for topic in topicsSoup:
        name = str(topic.text)
        id = topic.find('a')['href']
        videoUrl=pentesterAcademyURL+id
        videoResp=requests.get(videoUrl)
        videoTxt = videoResp.text
        videoSoup=BeautifulSoup(videoTxt,'lxml')
        videos = videoSoup.find_all("h4",{"class":"media-heading"})
        # print (str(i) + "%" + name + "%" + str(len(videos)))
        # i+=1
        videosList=[]
        for video in videos:
            dataFile.write( smart_str(name.replace('/','-')) + "%" + smart_str(video.text) )
            dataFile.write("\n")
    dataFile.close()
    print ("check the database baby !")
def printMenu():
    print ("Choose one of the following options :")
    print ("1. Get report dashboard")
    print ("2. Reconcile Courses")
    print ("3. Update Database")
    print ("4. Exit")
    try:
        retval = int(input(P+"Choice "+N+": "))
    except KeyboardInterrupt:
        printKeyBoardInterrupt()
    except:
        return printMenu()
    return retval
def printKeyBoardInterrupt():
    print ("\n"+R+"Hack the World"+N)
    sys.exit(0)
def rename_file(fileName,videoName,course):
    extension = fileName.split('.')[-1]
    srcPath = os.path.join(course,fileName)
    destPath = os.path.join(course,videoName+"."+extension)
    opt = input(Y+fileName+N+" will be renamed to "+Y+videoName+"."+extension+N+"\nPress 1 to accept :")
    try:
        if int(opt) == 1:
            os.rename(srcPath,destPath)
            if os.path.exists(destPath):
                return True
            else:
                return False
    except:
        return False
def cleaning_for_comparison(fList):
    cleanList = []
    for f in fList:
        cleanedF = f.replace(' ','_')
        cleanedF = cleanedF.replace(':','_')
        cleanedF = cleanedF.replace('/','_')
        cleanedF = cleanedF.replace('-','_')
        cleanedF = cleanedF.replace('.mp4','')
        cleanedF = cleanedF.replace('.m4v','_')
        cleanedF = cleanedF.replace('__','_')
        cleanedF = cleanedF.replace('__','_')
        cleanedF = cleanedF.lower()
        cleanedF = cleanedF.rstrip('_')
        cleanList.append(cleanedF)
    return cleanList
def getSimilarity(sentence1,sentence2):
    X =sentence1.replace('_',' ')
    Y = sentence2.replace('_',' ')
    # tokenization
    X_list = word_tokenize(X)
    Y_list = word_tokenize(Y)
    # sw contains the list of stopwords
    sw = stopwords.words('english')
    l1 =[];l2 =[]
    # remove stop words from string
    X_set = {w for w in X_list if not w in sw}
    Y_set = {w for w in Y_list if not w in sw}
    X_set = set(sorted(X_set))
    Y_set = set(sorted(Y_set))
    rvector = X_set.union(Y_set)
    for w in rvector:
        if w in X_set: l1.append(1) # create a vector
        else: l1.append(0)
        if w in Y_set: l2.append(1)
        else: l2.append(0)
        c = 0
    # cosine formula
    for i in range(len(rvector)):
        c+= l1[i]*l2[i]
    cosine = c / float((sum(l1)*sum(l2))**0.5)
    return cosine
def checkSimilarity(fileList,videoList,course,fileDict):
    print ("For {} unfinished files were {}".format(course,len(fileList)))
    fileList = sorted(list(fileList))
    videoList = sorted(list(videoList))
    for file in fileList:
        for video in videoList:
            sim = getSimilarity(video,file)
            if sim > 0.80:
                try:
                    opt = int(input("Are {} and {} same ? Cosine Similarity = {}\nPress 1 to accept : ".format(file,video,sim)))
                    if opt==1:
                        rename_file(fileDict[file],video,course)
                        # print ("Call rename function")
                        # renamedFile.append(file)
                        # renamedVideo.append(video)
                        fileList.remove(file)
                        videoList.remove(video)
                except:
                    continue
    fileList = set(fileList)
    vidoeList = set(videoList)
    return fileList,videoList
def formatVideoList(videoList):
    #Assuming that we are always receiving a cleaned List
    retval = []
    i=0
    for video in videoList:
        i+=1
        formattedVideo = "{:02d}".format(i)+"_"+video
        retval.append(formattedVideo)
    return retval
def printBruteForceTable(fileList,videoList,course,fileDict,videoDict):
    x = PrettyTable()
    x.field_names=["File Id","File Name","Video Id","Video Name"]
    if len(fileList) < len(videoList):
        for i in range(len(fileList)):
            x.add_row([str(i),fileDict[fileList[i]],str(i),videoDict[videoList[i]]])
        for i in range(len(fileList),len(videoList),1):
            x.add_row(['','',str(i),videoDict[videoList[i]]])
    else:
        for i in range(len(videoList)):
            x.add_row([str(i),fileDict[fileList[i]],str(i),videoDict[videoList[i]]])
        for i in range(len(videoList),len(fileList),1):
            x.add_row([str(i),fileDict[fileList[i]],'',''])
    # if len(fileList) < len(videoList):
    #     for i in range(len(fileList)):
    #         x.add_row([str(i),fileList[i],str(i),videoList[i]])
    #     for i in range(len(fileList),len(videoList),1):
    #         x.add_row(['','',str(i),videoList[i]])
    # else:
    #     for i in range(len(videoList)):
    #         x.add_row([str(i),fileList[i],str(i),videoList[i]])
    #     for i in range(len(videoList),len(fileList),1):
    #         x.add_row([str(i),fileList[i],'',''])
    print (x.get_string(title=course))
def checkExactMatchings(videoList,filesList):
    cleanedVideoList = cleaning_for_comparison(videoList)
    cleanedFilesList = cleaning_for_comparison(filesList)
    cleanedVideoList = formatVideoList(cleanedVideoList)
    vSet = set(cleanedVideoList)
    fSet = set(cleanedFilesList)
    filesNotMapped = fSet.difference(vSet)
    videosNotMapped = vSet.difference(fSet)
    if len(vSet.intersection(fSet))==len(vSet):
        return filesNotMapped,videosNotMapped,True
    return filesNotMapped,videosNotMapped,False
def checkStep3(fileList,videoList,course,fileDict):
    #Now chances are that size of both the lists don't match
    #This check is simple and only checks if the numbers match !
    fileList = sorted(list(fileList))
    videoList = sorted(list(videoList))
    renamedVideo = []
    renamedFile = []
    for i in range(len(fileList)):
        try:
            fileNum = int(fileList[i].split('_')[0])
            videoNum = int(videoList[i].split('_')[0])
            if fileNum == videoNum:
                opt = int(input("Are {} and {} same ?\nPress 1 to accept : ".format(fileList[i],videoList[i])+N))
                if opt==1:
                    retval = rename_file(fileDict[fileList[i]],videoList[i],course)
                    if retval:
                        renamedVideo.append(videoList[i])
                        renamedFile.append(fileList[i])
                    #This will have to be removed from list too
        except KeyboardInterrupt:
            printKeyBoardInterrupt()
            sys.exit()
        except err:
            continue
    renamedFile = set(renamedFile)
    renamedVideo = set(renamedVideo)
    fileList = set(fileList)
    videoList = set(videoList)
    filesNotMapped = fileList.difference(renamedFile)
    videosNotMapped = videoList.difference(renamedVideo)
    return filesNotMapped,videosNotMapped
def bruteForce(fileList,videoList,course,fileDict,videoDict):
    #Here they are being changed to a list
    fileList = sorted(list(fileList))
    videoList = sorted(list(videoList))
    userExit=0
    while userExit!=1:
        printBruteForceTable(fileList,videoList,course,fileDict,videoDict)
        print ("Choose one of the following options :")
        print ("1. Map a file to a video")
        print ("2. Skip")
        try:
            retval = int(input(P+"Choice "+N+": "))
            if retval == 1:
                print ("Let's Map")
                try:
                    videoId = int(input("Enter video id : "))
                    fileId = int(input("Enter file id : "))
                    if (videoId < len(videoList)) and (fileId < len(fileList)):
                        renameRetval = rename_file(fileDict[fileList[fileId]],videoList[videoId],course)
                        if renameRetval:
                            fileList.remove(fileList[fileId])
                            videoList.remove(videoList[videoId])
                    else:
                        print (R+"wrong format"+N)
                except:
                    continue
            elif retval ==2:
                userExit = 1
        except KeyboardInterrupt:
            printKeyBoardInterrupt()
        except:
            userExit=0
    fileList = set(fileList)
    videoList =set(videoList)
    return fileList,videoList
def getVideoDict(videoList):
    cleanedVideoList = cleaning_for_comparison(videoList)
    cleanedVideoList = formatVideoList(cleanedVideoList)
    cleanedDict = {}
    for i in range(len(videoList)):
        name = cleanedDict.get(cleanedVideoList[i],videoList[i])
        cleanedDict[cleanedVideoList[i]]=videoList[i]
    return cleanedDict
def reconcileVideos(courseid):
    #Step 1 : remove word spearators
    #Step 2 : check matchings, if matched do nothing
    #Step 3 : Try to check with numbers of video and file, if same , rename the file
    #Step 4 : Use cosine similarity , and rename
    #Step 5 : Display all the files that need to be renamed, select a file manually and map it from videos
    valuesList = list(courseList)
    course = valuesList[courseid]
    videoList = courseList.get(course)
    filesList , fileDict = getFiles(course)
    videoDict = getVideoDict(videoList)
    if filesList:
        filesNotMapped,videosNotMapped,checkFlag =checkExactMatchings(videoList,filesList)
        if checkFlag:
            print (G+'You are all synced up'+N)
        elif len(filesNotMapped)!=0:
            #Here Step 2 is done, Now we start with step 3
            #We send both sets and course and the dict
            userExit = 0
            while userExit !=1:
                print ("Choose one of the methods to be reconciled")
                print ("1. Using line numbers")
                print ("2. Using cosine similarity")
                print ("3. Manual Mapping")
                print ("4. Stop Reconciling and see the dashboard")
                try:
                    opt = int(input(P+"Choice : "+N))
                    if opt == 1:
                        filesNotMapped,videosNotMapped=checkStep3(filesNotMapped.copy(),videosNotMapped.copy(),course,fileDict)
                    elif opt ==2:
                        filesNotMapped,videosNotMapped=checkSimilarity(filesNotMapped.copy(),videosNotMapped.copy(),course,fileDict)
                    elif opt==3:
                        filesNotMapped,videosNotMapped = bruteForce(filesNotMapped,videosNotMapped,course,fileDict,videoDict)
                    elif opt==4:
                        userExit=1
                    else:
                        userExit=0
                except:
                    userExit= 0
        else:
            print (Y+"More Downloads are needed !"+N)
    else:
        print(R+"There are no files to be reconciled"+N)
    return
def getCourseNumber(courseName):
    courseName = courseName.replace('-','_')
    x = courseName.split('_')
    num = 0
    try:
        num = int(x[0])
    except:
        print ('Number unavailable!')
        num = 0
    num = "{:03d}".format(num)
    return num
def getFiles(path):
    #We have created a fileDict so that we don't lose the original name during renaming
    os.chdir(pentestFolder)
    listOfFiles = os.listdir(path)
    fileList = []
    fileDict = {}
    for file in listOfFiles:
        if file.strip().endswith('.mp4') or file.strip().endswith('.m4v'):
            fileList.append(file)
    cleanedFileList = cleaning_for_comparison(fileList)
    for i in range(len(fileList)):
        name = fileDict.get(cleanedFileList[i],fileList[i])
        fileDict[cleanedFileList[i]]=fileList[i]
    return fileList,fileDict
def readFromDatabase():
    dataFile = open(pentesterDatabasePath)
    courseList = {}
    for lines in dataFile:
        line = lines.split('%')
        courseName = line[0]
        videoName = line[1].strip()
        videoList = courseList.get(courseName,[])
        videoList.append(videoName)
        courseList[courseName]=videoList
    courseList = collections.OrderedDict(sorted(courseList.items()))
    return courseList

def getReports():
    x=PrettyTable()
    #Now some statistical counts
    totalVideosOnline = 0
    totalVideosOffline = 0
    totalDownloadsRemaining = 0
    totalFilesToBeReconciled = 0
    x.field_names = [B+"Course Id","Course Name","Videos Online","Videos Offline","Downloads Remaining","Files to be Reconciled"+N]
    i=0
    for course,videoList in courseList.items():
        filesList,fileDict = getFiles(course)
        # videosOnline = cleaning_for_comparison(videoList)
        # videosOffline = cleaning_for_comparison(filesList)
        filesNotMapped,videosNotMapped,checkFlag = checkExactMatchings(videoList,filesList)
        videosOnline = len(videoList) #Number of Videos that are available online
        videosOffline = len(filesList) # Number of Files in the directory
        downloadsRemaining = len(videosNotMapped) # Number of videos left to be downloaded
        videosToBeReconciled = len(filesNotMapped) # Number of files to be reconciled

        totalVideosOnline+= videosOnline
        totalVideosOffline+=videosOffline
        totalDownloadsRemaining+=downloadsRemaining
        totalFilesToBeReconciled+=videosToBeReconciled

        videosToBeReconciled = str(videosToBeReconciled)+N #So that the color is maintained
        i+=1
        if checkFlag:
            courseId = G+str(i)
        elif len(videosNotMapped)==len(videoList):
            courseId = R+str(i)
        else:
            courseId = Y+str(i)
        x.add_row([courseId,course,videosOnline,videosOffline,downloadsRemaining,videosToBeReconciled])
    x.add_row(['-'*10,'-'*70,'-'*15,'-'*15,'-'*15,'-'*15])
    x.add_row([Y+"TOTAL ", str(i), str(totalVideosOnline), str(totalVideosOffline), str(totalDownloadsRemaining),str(totalFilesToBeReconciled)+N ])
    print(x.get_string(title="Pentester Academy"))

def main():
    print ("Welcome to the program to print all pentesteracademy videos and courses list")
    print ("*" + "=*"*38)
    print (" "*58 + "written by Tipsytux")
    global courseList
    courseList = readFromDatabase()
    if not (os.path.exists(pentestFolder)):
        setup()
    elif not len(next(os.walk(pentestFolder))[1]) == len(courseList):
        setup()
    os.chdir(pentestFolder)
    userExit = 0
    while userExit !=1:
        choice = printMenu()
        if choice == 1:
            getReports()
        elif choice ==2:
            #This part is used for reconciling
            try:
                courseId = int(input("Enter a course id : "))
                if courseId <= len(courseList):
                    reconcileVideos(courseId-1)
                else:
                    print ("Enter a valid course id")
            except err:
                print ("Enter a valid course id")
        elif choice ==3:
            updateDatabase()
            courseList = readFromDatabase()
        elif choice == 4:
            userExit=1
        else:
            choice = printMenu()
    print ("Thanks")
main()
